#fastlane_version "1.109.0"

# This value helps us track success metrics for Fastfiles
# we automatically generate. Feel free to remove this line
# once you get things running smoothly!
#generated_fastfile_id "86835581-5040-4df6-893a-d2859cf61953"

default_platform :android

platform :ios do
  before_all do
    #notification emails
    ENV['NOTIFICATION_EMAILS'] = "devops@careered.com"

	#package directory path
    ENV['PACKAGE_DIRECTORY_PATH'] = "/Users/hadron/work/hadron-share/faculty-app-dist/IOS/Release"
  end

  desc "Upload to crashlytics beta"
  lane :deploy do |options|
    #validate the request
    is_error = false
    test_platforms= ["crashlytics"]

    if(options[:to])
      test_platforms = options[:to].split(',')
    end

	if(options[:filePath])
		ENV['PACKAGE_DIRECTORY_PATH'] = options[:filePath]
	end

    if !options[:env]
      show_error_message(message: 'Parameter "env" is required. usage: "fastlane ios beta env:{Environment}"')
      is_error = true
    else
      if(!"dev,int,reg,dr,prod".include?(options[:env].downcase))
        show_error_message(message: 'invalid value provided in parameter "env".')
        is_error = true
      end
    end


    if !options[:campuses]
      options[:campuses] = 'aiu,ctu'
    end

    env = options[:env]
    campuses = options[:campuses].split(',') 

    campuses.each do |campus|
      if(campus.downcase != 'aiu' and campus.downcase != 'ctu')
        show_error_message(message: 'invalid value provided in parameter "campuses".')
        is_error = true
      end
	 

    end

    test_platforms.each do |test_platform|
      if(test_platform.downcase != 'crashlytics' and test_platform.downcase != 'testflight')
        show_error_message(message: 'unsupported test platform "#{test_platform}" selected.')
        is_error = true
      end
    end
    
    #process the request
    if !is_error then
      ENV['ENV'] = env.downcase
      notification_emails= ENV['NOTIFICATION_EMAILS']
      ipa_path = nil
      notes_path = get_release_notes_path

      show_message(message: "Release Notes: #{notes_path}")

      campuses.each do |campus| 
        show_message(message: "campus: #{campus}")
        ipa_path = get_ipa_path(campus, options[:ver], options[:build])
        
        test_platforms.each do |test_platform|
          if(test_platform == "crashlytics")
      
            beta_crashlytics(
                ipa_path:ipa_path, 
                notification_emails: notification_emails,
                notes_path: notes_path
            )

          elsif(test_platform == "testflight")
            ENV['CAMPUS'] = campus
            team_id= CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
            app_identifier= CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
            apple_id= CredentialsManager::AppfileConfig.try_fetch_value(:apple_id)

            if(team_id and app_identifier and apple_id)

              beta_testflight(
                ipa_path:ipa_path, 
                notification_emails: notification_emails,
                team_id: team_id,
                app_identifier: app_identifier,
                apple_id: apple_id
              )

            else
              show_error_message(message: "Either team_id, app_id or apple_id is not valid to deploy to testflight")

              show_error_message(message: "team_id: #{team_id}")
              show_error_message(message: "app_identifier: #{app_identifier}")
              show_error_message(message: "apple_id: #{apple_id}")
              show_error_message(message: "ipa_path: #{ipa_path}")
            end
          end
        end
      end
    end
  end

  private_lane :beta_crashlytics do |options|

    ipa_path = options[:ipa_path]
    notification_emails = options[:notification_emails]
    notes_path = options[:notes_path]


env = ENV['ENV']
school = ENV['CAMPUS']
	Groups = nil

    if env == 'dev' then
    Groups = ['dev-student-ios','DEVOPS']
    end

 if (env == 'int' ) then
 Groups = ['int-student-ios','DEVOPS']
end


      if env == 'reg' then
    Groups = ['reg-student-ios','DEVOPS']
    end

    

	

    if ipa_path and notification_emails then
      show_message(message: "Submitting #{ipa_path} to crashlytics beta")

      # upload to Beta by Crashlytics
      crashlytics(
        api_token: "7d21e42a76903990f03f47a989576d78af50b23e",
        build_secret: "74bcb8fd8f389980a889dfebba50fdd409b465d619397388e8a4ccc922b02bc9",
		crashlytics_path:'/Library/Crashlytics/Crashlytics.framework',
        ipa_path: ipa_path,
        #notes_path: notes_path,
        notifications: true,
        groups: Groups,
        emails: notification_emails
      )

    else
      show_error_message(message: '.ipa path and/or notification emails is missing') 
    end
  end

  desc "Upload to testflight"
  private_lane :beta_testflight do |options|

    ipa_path = options[:ipa_path]
    notification_emails = options[:notification_emails]
    team_id = options[:team_id]
    app_identifier = options[:app_identifier]
    apple_id = options[:apple_id]

    if ipa_path and notification_emails and team_id and app_identifier and apple_id then
      show_message(message: "Submitting #{ipa_path} to testflight")

      #testflight
 
      pilot(
        username: "Devops@careered.com",
        team_id: team_id, 
        app_identifier: app_identifier,
        apple_id: apple_id,
        skip_submission: true, # upload package but skip submission for testing
        skip_waiting_for_build_processing: true, # skip wait to finish processing build in itunes
        ipa: ipa_path
        #changelog:"" #change log or what's new text
      )
 
    else
      show_error_message(message: 'Can not submit build to testflight. One or more parameters are invalid or missing.') 
    end
  end
end

platform :android do
  before_all do
    #notifications
    ENV['NOTIFICATION_EMAILS'] = "devops@careered.com"

	#package directory path
    ENV['PACKAGE_DIRECTORY_PATH'] = "/Users/hadron/work/hadron-share/faculty-app-dist/Android/Release"

    #ENV['SLACK_URL'] = "https://hooks.slack.com/services/..."
  end

  desc "Upload to crashlytics beta"
  lane :deploy do |options|
    rand = Random.rand(0..1)
    if rand == 0
      squirrel
    elsif rand == 1
      boat
    end

	if(options[:filePath])
		ENV['PACKAGE_DIRECTORY_PATH'] = options[:filePath]
	end

    #validate the request
    is_error = false

    if !options[:env]
      show_error_message(message: 'Parameter "env" is required. usage: "fastlane ios beta env:{Environment}"')
      is_error = true
    else
      if(!"dev,int,reg,dr,prod".include?(options[:env].downcase))
        show_error_message(message: 'invalid value provided in parameter "env".')
        is_error = true
      end
    end

    if !options[:campuses]
      options[:campuses] = 'aiu,ctu'
    end

    env = options[:env]
    campuses = options[:campuses].split(',') 

    campuses.each do |campus|
      if(campus.downcase != 'aiu' and campus.downcase != 'ctu')
        show_error_message(message: 'invalid value provided in parameter "campuses".')
        is_error = true
      end
    end
    
    #process the request
    if !is_error then
      ENV['ENV'] = env.downcase

      notification_emails= ENV['NOTIFICATION_EMAILS']
      apk_path = nil
      notes_path = get_release_notes_path

      campuses.each do |campus| 
        apk_path = get_apk_path(campus, options[:ver], options[:build])
        
        show_message(message: "Release notes: #{notes_path}")
        beta(
            apk_path:apk_path, 
            notification_emails: notification_emails, 
            notes_path: notes_path
        )
      end
    end
  end

  # Note: Crashlytics failed if file name has white space or '.'
  private_lane :beta do |options|
    apk_path = options[:apk_path]
    notification_emails = options[:notification_emails].split(',')

   env = ENV['ENV']
   school = ENV['CAMPUS']
	Groups = nil
    if env == 'dev' then
    Groups = ['dev-student-android','DEVOPS']
    end


 if (env == 'int' and school == 'AIU') then
 Groups = ['int-student-android','DEVOPS','aiu-android-student-mobile-uat-group']
end

 if (env == 'int' and school == 'CTU') then
 Groups = ['int-student-android','DEVOPS','ctu-android-student-mobile-uat-group']
end
   

    

    if env == 'reg' then
    Groups = ['reg-student-android','DEVOPS']
    end

    if env == 'prod' then 
    Groups = ['DEVOPS']
    end

    if apk_path and notification_emails then
      show_message(message: "Submitting #{apk_path} to crashlytics beta")
      
      # upload to Beta by Crashlytics
      crashlytics(
        api_token: "7d21e42a76903990f03f47a989576d78af50b23e",
        build_secret: "74bcb8fd8f389980a889dfebba50fdd409b465d619397388e8a4ccc922b02bc9",
        apk_path: apk_path,
        #crashlytics_path: "/Users/hadron/Library/CrashlyticsAndroid/crashlytics-devtools.jar"
        #notes_path: options[:notes_path],
        notifications: true,
        groups: Groups,
        emails: notification_emails
      )

    else
      show_error_message(message: '.apk path and/or notification emails is missing') 
    end
  end
end


#Helper methods
#color code for messages
def red;            "\e[31m#{self}\e[0m" end
def green;          "\e[32m#{self}\e[0m" end

def show_error_message(options)
  if options[:message]
    puts "error: #{options[:message]}".red
  end
end

def show_message(options)
  if options[:message]
    puts "#{options[:message]}".green
  end
end

def get_release_notes_path
  raise 'env is a required parameters' if ENV['ENV'].nil?
  
  env = ENV['ENV']

  "./fastlane/release-notes/release-notes-#{env}.txt" 
end

def get_apk_path(campus=nil, version=nil, build=nil)
    raise 'Environment is not set.' if ENV['ENV'].nil?

    env = ENV['ENV']
    base_path = ENV['PACKAGE_DIRECTORY_PATH']
    apk_path = nil

    if env == 'prod' then
      apk_path = "#{base_path}/#{campus.upcase}-Student.apk"
    else
      apk_path = "#{base_path}#{campus.upcase}-Student-#{env.upcase}.apk"
    end
    
    if version and build then
	  version = version.gsub(/\./, '')
     build = build.gsub('C','') 
     build = build.gsub(' ','')
      apk_path = apk_path.dup.gsub! ".apk", "-#{version}-#{build}.apk"
	  
    end

    apk_path
end


def get_ipa_path(campus=nil, version=nil, build=nil)
    raise 'Environment is not set.' if ENV['ENV'].nil?

    env = ENV['ENV']
    base_path = ENV['PACKAGE_DIRECTORY_PATH']
    ipa_path =nil

    if env == 'prod' then
      ipa_path = "#{base_path}/#{campus.upcase}-Student.ipa"
    else
      ipa_path = "#{base_path}/#{campus.upcase}-Student-#{env.upcase}.ipa"
    end

    #temporary for non-prod adhoc package release
    #if env == 'int' then
    #  ipa_path = "#{base_path}/#{campus.upcase}-INT.ipa"
    #elsif env == 'reg' then
    #  ipa_path = "#{base_path}/#{campus.upcase}-REG.ipa"
    #end

    if version and build then
	  version = version.gsub(/\./, '')
build = build.gsub('C','') 
build = build.gsub(' ','')

      ipa_path = ipa_path.dup.gsub! ".ipa", "-#{version}-#{build}.ipa"
      
    end

    ipa_path
end

def squirrel
  puts "
    !!!!
  !!!!!!!!
!!!!!!!!!!!   O_O
!!!  !!!!!!! /@ @\\
      !!!!!! \\ x /
      !!!!!!/ m  !m
       !!!!/ __  |
       !!!!|/  \\__
        !!!\\______\\
  "
end

def boat
  puts "
     .  o ..
     o . o o.o
          ...oo
            __[]__
         __|_o_o_o\__
         \\\"\"\"\"\"\"\"\"\"\"/
          \\. ..  . /
     ^^^^^^^^^^^^^^^^^^^^
  "
end
